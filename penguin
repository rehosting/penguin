#!/bin/bash

set -eu

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

BOLD=""
RESET=""
RED=""
GREEN=""
# Check if we're in a terminal and if it supports colors
if [ -t 1 ] && [ -n "$TERM" ] && command_exists tput && tput setaf 1 >/dev/null 2>&1; then
    ncolors=$(tput colors)
    if [ -n "$ncolors" ] && [ $ncolors -ge 8 ]; then
        # Terminal supports at least 8 colors
        BOLD=$(tput bold)
        RESET=$(tput sgr0)
        RED=$(tput setaf 1)
        GREEN=$(tput setaf 2)
    fi
fi

is_subnet_in_use() {
    local subnet=$1
    local networks=$(docker network ls --quiet)
    for net_id in $networks; do
        local net_info=$(docker network inspect $net_id --format '{{range .IPAM.Config}}{{.Subnet}}{{end}}')
        if [[ "$net_info" == "$subnet" ]]; then
            return 0  # Subnet is in use
        fi
    done
    return 1  # Subnet is not in use
}

# Function to generate a random network name
generate_network_name() {
    echo "nw_$RANDOM"
}

# Generate a random subnet
find_available_subnet() {
    local base="192.168"  # Base is 2 octets
    local found=0
    local subnet
    for i in {0..255}; do
        subnet="$base.$i.0/24"  # Correct subnet notation for /24 networks
        if ! is_subnet_in_use $subnet; then
            echo $subnet
            found=1
            break
        fi
    done
    if [ $found -eq 0 ]; then
        echo "No available subnet found!" >&2
        exit 1
    fi
}

penguin_run() {
    local cmd=()
    local maps=()
    local build=false
    local build_singularity=false
    local pydev=false
    local verbose=false
    local subnet=""
    local container_name="" # Name of the instance
    local image="rehosting/penguin" # Container to run
    local extra_docker_args=""

    # Process each command-line argument
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --wrapper-help)
                echo "Usage: penguin [WRAPPER FLAGS] [COMMAND] [ARGS]"
                echo "Wrapper script for running PENGUIN in a Docker container"
                echo ""
                echo "Wrapper-specific flags may be passed in *before* the PENGUIN command. If a value is required, it must be specified immediately after the flag with a space."
                echo "  --build: Build the PENGUIN container before running the specified command. If no command is specifed, just build and exit"
                echo "  --build-singularity: Build the PENGUIN container and then convert it to singularity. No command will be run"
                echo "  --pydev: Map local python package and plugin code into container and reinstall before running the specified command."
                echo "  --subnet: IP subnet to use. For example --subnet 192.168.0.0/24 would produce a network with firmware reachable at 192.168.0.2."
                echo "            Default: automatically find next free /24 subnet in 192.168.x.x"
                echo "            Set to 'none' to disable network creation."
                echo "  --name: A name to identify the penguin container. By default based on project directory (if available)"
                echo "  --image: Which image to run. Default: rehosting/penguin"
                echo "  --extra_docker_args: Extra arguments to pass to docker. For example --extra_docker_args \"-p 8000:80\" to expose container port 80 on host port 8000."
                echo "  --verbose: Print verbose output for penguin wrapper (e.g., filesystem mappings, docker command)"
                echo "  --wrapper-help: this message"
                echo ""
                echo "All other arguments will be passed through to the main PENGUIN command in the container."
                echo "For example try:"
                echo "  penguin --help"
                echo "  penguin init --help"
                echo "  penguin run --help"
                exit 0
                ;;
            --build)
                build=true
                shift
                ;;
            --build-singularity)
                build_singularity=true
                shift
                ;;
            --pydev)
                pydev=true
                shift
                ;;
            --subnet)
                subnet="$2"
                shift 2
                ;;
            --name)
                container_name="$2"
                shift 2
                ;;
            --image)
                image="$2"
                shift 2
                ;;
            --extra_docker_args)
                extra_docker_args="$2"
                shift 2
                ;;
            --verbose)
                verbose=true
                shift
                ;;
            *)  # Default case: If no more known options, keep as part of command
                cmd=("$@")
                break
                ;;
        esac
    done
    # If command is empty, parse any un-shifted args into array - probably means we were run with wrapper flags only
    if [[ ${#cmd[@]} -eq 0 ]]; then
        cmd=("$@")
    fi

    # If verbose, log all wrapper args and command
    if $verbose; then
        echo "${BOLD}Wrapper args:${RESET}"
        echo "  build: $build"
        echo "  build_singularity: $build_singularity"
        echo "  pydev: $pydev"
        echo "  subnet: $subnet"
        echo "  name: $container_name"
        echo "  extra_docker_args: $extra_docker_args"
        echo "  verbose: $verbose"
        echo "  penguin cmd: ${cmd[*]}"
        echo
    fi

    # Handle special case for "init" command by ensuring ./projects is mapped if no output directory is specified
    if [[ ${#cmd[@]} -gt 1 && "${cmd[0]}" == "init" && ! "${cmd[1]}" == "--help" && ! " ${cmd[@]} " =~ " --output " ]]; then
        if [ ! -d "projects" ]; then
            mkdir "projects"
        fi
        maps+=("$(pwd)/projects:/host_projects")
        cmd+=("--output_base")
        cmd+=("/host_projects")
    fi


    # Check for "--output" flag and create the specified directory if it doesn't exist
    for ((i=1; i<${#cmd[@]}; i++)); do
        if [[ "${cmd[$i]}" == "--output" && $((i+1)) -lt ${#cmd[@]} ]]; then
            output_dir="${cmd[$i+1]}"
            if [[ ! -d "$output_dir" ]]; then
                mkdir -p "$output_dir"
            fi
        fi
    done

    # Create mappings for existing paths
    paths=("${cmd[@]:1}")
    for arg in "${paths[@]}"; do
        if [[ -e "$arg" ]]; then
            local abspath=$(realpath "$arg")
            local host_path=$(dirname "$abspath")
            local guest_path="/host_$(basename "$host_path")"

            maps+=("$host_path:$guest_path")
        fi
    done

    # If pydev mode we need to also map ./pkg to /pkg
    if $pydev; then
        maps+=("$(pwd)/src:/pkg")
        maps+=("$(pwd)/pyplugins:/pandata")
    fi

    # Sort mappings by path length
    IFS=$'\n' maps=($(sort -r <<<"${maps[*]}"))
    unset IFS

    # Rewrite paths
    new_cmd=()
    if [[ ${#cmd[@]} -gt 0 ]]; then
        new_cmd+=("${cmd[0]}") # Never rewrite the first arg (penguin subcommand: init/run/patch/etc)
    fi
    for ((i=1; i<${#cmd[@]}; i++)); do
        arg="${cmd[$i]}"
        local rewritten=false

        for map in "${maps[@]}"; do
            local host_path="${map%%:*}"
            local guest_path="${map#*:}"

            # Check if the real directory path of the argument matches the host path
            local real_arg_path="$(realpath "$arg" 2>/dev/null)"
            if [[ "$real_arg_path" == "$host_path"* ]]; then
                # Accurately replace the host path with the guest path
                local rewritten_path="${real_arg_path//$host_path/$guest_path}"
                new_cmd+=("$rewritten_path")
                rewritten=true
                break
            fi
        done

        if ! $rewritten; then
            new_cmd+=("$arg")
        fi
    done

    if $verbose; then
        echo "${BOLD}Mappings from host paths to guest paths: $RESET"
        for map in "${maps[@]}"; do
            echo "  $map"
        done
        echo
    fi


     # Build Docker command
    docker_cmd=("docker" "run" "--rm")

    # If we have a name set, ensure it's available. We only really care about this for the run (and maybe explore) action
    if [[ ${#cmd[@]} -gt 1 && "${cmd[0]}" == "run" ]]; then
        if [ -z "$container_name" ]; then
            # No name set - try to grab it - find last argument with host path and use that
            for ((i=${#cmd[@]}-1; i>0; i--)); do
                # Check if it's a directory or file
                if [[ -e "${cmd[$i]}" ]]; then
                    potential_name=$(basename "${cmd[$i]}")
                    # If potential name is config.yaml or starts with a number try up a level
                    # or config.yaml
                    if [[ $potential_name =~ ^[0-9] ]] || [[ $potential_name =~ ^config.yaml ]]; then
                        # Take the dirname then basename
                        potential_name=$(basename "$(dirname "${cmd[$i]}")")
                        if [[ $potential_name =~ ^[0-9] || $potential_name =~ ^config.yaml ]]; then
                            # Still bad - skip
                            continue
                        fi
                    fi

                    # Filter out any non alpha numeric characters
                    potential_name=$(echo "$potential_name" | tr -cd '[:alnum:]')

                    # If potential name is empty after filtering, skip
                    if [ -z "$potential_name" ]; then
                        continue
                    fi

                    container_name=$potential_name
                    if $verbose; then
                        echo "${BOLD}Calculated name for container: ${GREEN}$container_name${RESET}"
                        echo
                    fi
                    break
                fi
            done
        else
            if $verbose; then
                echo "${BOLD}Using provided for container: ${GREEN}$container_name${RESET}"
                echo
            fi
        fi

        if [ -n "$container_name" ]; then
            if docker ps --all --format '{{.Names}}' | grep -q "^$container_name$"; then
                echo "${BOLD}ERROR: Container name ${RED}$container_name${RESET}${BOLD} is already in use!${RESET}"
                echo "  Please specify a different name with ${BOLD}--name${RESET}"
                exit 1
            fi
            # Unique name - add it to command
            docker_cmd+=("--name" "$container_name")
        fi
    fi

    # Check if we're in an interactive terminal, if so add -it
    if [ -t 0 ]; then
        docker_cmd+=("-it")
    fi

    # Dynamic network
    if [ "$subnet" != "none" ]; then
        network_name=$(generate_network_name)
        if [ -z "$subnet" ]; then
            # if subnet is empty, find one. Otherwise if subet is none skip
            subnet=$(find_available_subnet)
        fi
        gateway="${subnet%.*}.1"
        ip="${subnet%.*}.2"

        # Create the network
        docker network create -d bridge --subnet=$subnet --gateway=$gateway $network_name > /dev/null

        # Setup  on-exit cleanup
        trap "docker network rm $network_name>/dev/null" EXIT

        docker_cmd+=("--network" "$network_name" "--ip" "$ip")
        # Add env variable CONTAINER_IP=ip
        docker_cmd+=("-e" "CONTAINER_IP=$ip")

        # Add container name if set
        if [ -n "$container_name" ]; then
            docker_cmd+=("-e" "CONTAINER_NAME=$container_name")
        fi

        if $verbose; then
            echo "${BOLD}Docker network setup:${RESET}"
            echo "  Network name: $network_name"
            echo "  Subnet: $subnet"
            echo "  Gateway: $gateway"
            echo "  Container IP: $ip"
            echo
        fi
    else
        if $verbose; then
            echo "${BOLD}Docker network setup:${RESET}"
            echo "  Skipped due to --subnet none flag"
            echo
        fi
    fi

    # Add mappings to docker command
    for map in "${maps[@]}"; do
        docker_cmd+=("-v" "$map")
    done

    # Add extra args, if set
    if [ -n "$extra_docker_args" ]; then
        docker_cmd+=($extra_docker_args)
    fi

    if $build_singularity; then
        build=true
    fi

    if $build; then
        echo "Running with container rebuild (--build). Entire container will be rebuilt."
        # Rebuild container
        # Make sure we have Dockerfile and directory is named penguin
        if [ ! -f "Dockerfile" ]; then
            echo "Dockerfile not found in current directory and you requested a container rebuild"
            exit 1
        fi
        # Check if current directory is named penguin
        if [ ! "$(basename "$(pwd)")" == "penguin" ]; then
            echo "Current directory is not named penguin and you requested a container rebuild"
            exit 1
        fi

        if [ ! -z "${SSH_AUTH_SOCK+x}" ]; then
            # Build with ssh
            DOCKER_BUILDKIT=1 docker build --build-arg SSH=1 --ssh default -t $image .
        else
            DOCKER_BUILDKIT=1 docker build -t $image .
        fi

        # If we have no other args, and not build_singularity exit 0
        if [[ ${#new_cmd[@]} -eq 0 && $build_singularity == false ]]; then
            echo "$image built. Exiting as no command was specified."
            exit 0
        fi
    fi

    if $build_singularity; then
        rm -rf .singularity || true
        mkdir -p .singularity
        docker run -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd)/.singularity:/output \
            --privileged -t \
            --rm quay.io/singularity/docker2singularity:v3.9.0 \
            rehosting/penguin
        mv .singularity/rehosting_penguin*.sif penguin.sif
        rm -rf .singularity || true
        echo "penguin.sif built"
        exit 0
    fi

    # Add the command
    if $pydev; then
        echo "Running in Python development mode (--pydev). Python package will be reinstalled on each run"

        # We install penguin as root (mirroring main docker logic)
        # And then run it as the current user. To do this we add the current UID/GID to the container

        # make a tempdir
        d=$(mktemp -d)

        # Create etc/{passwd,group} and map into container so current user exists. Based on contents in real container
        # Username matches host UID and we add a group named 'g' that matches the host GID
        docker run --rm "$image" /bin/bash -c "cat /etc/passwd" > $d/passwd_user
        echo "$(id -un):x:$(id -u):$(id -g):,,,:$(eval echo ~$USER):/bin/bash" >> $d/passwd_user

        docker run --rm "$image" /bin/bash -c "cat /etc/group" > $d/group_user
        echo "g:x:$(id -g):" >> $d/group_user

        docker_cmd+=("-v" "$d/passwd_user:/etc/passwd")
        docker_cmd+=("-v" "$d/group_user:/etc/group")
        docker_cmd+=("--cap-add=NET_BIND_SERVICE")
        docker_cmd+=("$image")

        docker_cmd+=("/bin/bash" "-c" "pip install -e /pkg &>/tmp/log.txt || { cat /tmp/log.txt; exit 1; }; sudo -E -su \"$(id -un)\" -g g penguin ${new_cmd[*]}")
    else
        d=""
        # Ensure we maintain the same user in the container
        docker_cmd+=("-u" "$(id -u):$(id -g)")
        docker_cmd+=("--cap-add=NET_BIND_SERVICE")

        docker_cmd+=("$image")
        docker_cmd+=("penguin")
        docker_cmd+=("${new_cmd[@]}")
    fi

    if $verbose; then
        echo "${BOLD}PENGUIN command:${RESET}"
        echo "  penguin ${new_cmd[@]}"
        echo

        echo "${BOLD}Complete docker commands:${RESET}"
        if [ "$subnet" != "none" ]; then
            echo "  docker network create -d bridge --subnet=$subnet --gateway=$gateway $network_name"
        fi
        echo "  ${docker_cmd[*]}"
        echo

        echo "${BOLD}Command output:${RESET}"
    fi

    # Execute Docker command
    "${docker_cmd[@]}"

    # Clean up tempdir if it was created
    if [ -n "$d" ]; then
        rm -rf "$d"
    fi
}

# Main function
main() {
    penguin_run "$@"
}

# Find and replace /host_ with ./
#main "$@" | sed 's/\/host_/\.\//g'
main "$@"
